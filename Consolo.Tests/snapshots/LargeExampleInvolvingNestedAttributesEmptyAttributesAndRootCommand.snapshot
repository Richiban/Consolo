using System;
using System.Linq;
using System.Collections.Generic;
using System.Collections.Immutable;

namespace Consolo.TestSource.g
{
    /// <summary>
    /// Entrypoint class for Consolo.TestSource
    /// </summary>
    public static class Program
    {
        /// <summary>
        /// Entrypoint for Consolo.TestSource
        /// </summary>
        public static void Main(string[] args)
        {
            var consoleColor = Console.ForegroundColor;
            var helpTextColor = ConsoleColor.Green;

            // Commands marked * have an associated method
            // {root} command*
                // remote command*
                    // remove command*
                    // add command*
                // branch command*
                // --version command*

            args = args.SelectMany(arg => arg.StartsWith(' ') && ! arg.StartsWith("--") ? arg.Skip(1).Select(c => $"-{c}") : new [] { arg }).ToArray();

            var isHelp = args.Any(arg => arg == "--help" || arg == "-h" || arg == "-?");

            {
                if (args.Length >= 1 && args[0] == "remote")
                {
                    if (args.Length >= 2 && args[1] == "remove")
                    {
                        if (!isHelp)
                        {
                            var unclaimedArgs = new SortedSet<int>(Enumerable.Range(2, args.Length - 2));
                            var processingError = false;

                            var remoteName = default(System.String);
                            if (!MatchNextPositional(args, ref remoteName, s => s, unclaimedArgs))
                            {
                                Console.ForegroundColor = ConsoleColor.Red;
                                Console.Error.WriteLine($"Missing value for argument 'remoteName'");
                                Console.ForegroundColor = consoleColor;
                                processingError = true;
                            }

                            if (unclaimedArgs.Any())
                            {
                                Console.ForegroundColor = ConsoleColor.Red;
                                Console.Error.WriteLine($"Unrecognised args: " + string.Join(", ", unclaimedArgs.Select(i => args[i])) + "");
                                Console.ForegroundColor = consoleColor;
                                processingError = true;
                            }

                            if (!processingError)
                            {
                                Consolo.Samples.SampleProgram.RemoveRemote(remoteName);
                                return;
                            }
                        }

                        Console.WriteLine("Consolo.TestSource");
                        Console.WriteLine();
                        Console.WriteLine("remove");
                        Console.ForegroundColor = helpTextColor;
                        Console.WriteLine();
                        Console.ForegroundColor = consoleColor;
                        Console.WriteLine("Usage:");
                        Console.WriteLine($"    remote remove <remoteName> [options]");
                        Console.WriteLine();
                        Console.WriteLine("Parameters:");
                        Console.Write("    remoteName  ");
                        Console.ForegroundColor = helpTextColor;
                        Console.WriteLine("String");
                        Console.ForegroundColor = consoleColor;
                        Console.WriteLine();
                        Console.WriteLine("Options:");
                        Console.Write("    -?, -h, --help  ");
                        Console.ForegroundColor = helpTextColor;
                        Console.WriteLine("Show help and usage information");
                        Console.ForegroundColor = consoleColor;
                        Console.WriteLine();
                        return;
                    }
                    if (args.Length >= 2 && args[1] == "add")
                    {
                        if (!isHelp)
                        {
                            var unclaimedArgs = new SortedSet<int>(Enumerable.Range(2, args.Length - 2));
                            var processingError = false;

                            var remoteName = default(System.String);
                            if (!MatchNextPositional(args, ref remoteName, s => s, unclaimedArgs))
                            {
                                Console.ForegroundColor = ConsoleColor.Red;
                                Console.Error.WriteLine($"Missing value for argument 'remoteName'");
                                Console.ForegroundColor = consoleColor;
                                processingError = true;
                            }

                            var url = default(System.String);
                            if (!MatchNextPositional(args, ref url, s => s, unclaimedArgs))
                            {
                                Console.ForegroundColor = ConsoleColor.Red;
                                Console.Error.WriteLine($"Missing value for argument 'url'");
                                Console.ForegroundColor = consoleColor;
                                processingError = true;
                            }

                            if (unclaimedArgs.Any())
                            {
                                Console.ForegroundColor = ConsoleColor.Red;
                                Console.Error.WriteLine($"Unrecognised args: " + string.Join(", ", unclaimedArgs.Select(i => args[i])) + "");
                                Console.ForegroundColor = consoleColor;
                                processingError = true;
                            }

                            if (!processingError)
                            {
                                Consolo.Samples.SampleProgram.AddRemote(remoteName, url);
                                return;
                            }
                        }

                        Console.WriteLine("Consolo.TestSource");
                        Console.WriteLine();
                        Console.WriteLine("add");
                        Console.ForegroundColor = helpTextColor;
                        Console.WriteLine();
                        Console.ForegroundColor = consoleColor;
                        Console.WriteLine("Usage:");
                        Console.WriteLine($"    remote add <remoteName> <url> [options]");
                        Console.WriteLine();
                        Console.WriteLine("Parameters:");
                        Console.Write("    remoteName  ");
                        Console.ForegroundColor = helpTextColor;
                        Console.WriteLine("String");
                        Console.ForegroundColor = consoleColor;
                        Console.Write("    url         ");
                        Console.ForegroundColor = helpTextColor;
                        Console.WriteLine("String");
                        Console.ForegroundColor = consoleColor;
                        Console.WriteLine();
                        Console.WriteLine("Options:");
                        Console.Write("    -?, -h, --help  ");
                        Console.ForegroundColor = helpTextColor;
                        Console.WriteLine("Show help and usage information");
                        Console.ForegroundColor = consoleColor;
                        Console.WriteLine();
                        return;
                    }
                    if (!isHelp)
                    {
                        var unclaimedArgs = new SortedSet<int>(Enumerable.Range(1, args.Length - 1));
                        var processingError = false;

                        if (unclaimedArgs.Any())
                        {
                            Console.ForegroundColor = ConsoleColor.Red;
                            Console.Error.WriteLine($"Unrecognised args: " + string.Join(", ", unclaimedArgs.Select(i => args[i])) + "");
                            Console.ForegroundColor = consoleColor;
                            processingError = true;
                        }

                        if (!processingError)
                        {
                            Consolo.Samples.SampleProgram.ListRemotes();
                            return;
                        }
                    }

                    Console.WriteLine("Consolo.TestSource");
                    Console.WriteLine();
                    Console.WriteLine("remote");
                    Console.ForegroundColor = helpTextColor;
                    Console.WriteLine();
                    Console.ForegroundColor = consoleColor;
                    Console.WriteLine("Usage:");
                    Console.WriteLine($"    remote [options]");
                    Console.WriteLine();
                    Console.WriteLine("Options:");
                    Console.Write("    -?, -h, --help  ");
                    Console.ForegroundColor = helpTextColor;
                    Console.WriteLine("Show help and usage information");
                    Console.ForegroundColor = consoleColor;
                    Console.WriteLine();
                    Console.WriteLine("Commands:");
                    Console.Write("    remove <remoteName>    ");
                    Console.ForegroundColor = helpTextColor;
                    Console.WriteLine("  ");
                    Console.ForegroundColor = consoleColor;
                    Console.Write("    add <remoteName> <url> ");
                    Console.ForegroundColor = helpTextColor;
                    Console.WriteLine("  ");
                    Console.ForegroundColor = consoleColor;
                    return;
                }
                if (args.Length >= 1 && args[0] == "branch")
                {
                    if (!isHelp)
                    {
                        var unclaimedArgs = new SortedSet<int>(Enumerable.Range(1, args.Length - 1));
                        var processingError = false;

                        if (unclaimedArgs.Any())
                        {
                            Console.ForegroundColor = ConsoleColor.Red;
                            Console.Error.WriteLine($"Unrecognised args: " + string.Join(", ", unclaimedArgs.Select(i => args[i])) + "");
                            Console.ForegroundColor = consoleColor;
                            processingError = true;
                        }

                        if (!processingError)
                        {
                            Consolo.Samples.BranchActions.ListBranches();
                            return;
                        }
                    }

                    Console.WriteLine("Consolo.TestSource");
                    Console.WriteLine();
                    Console.WriteLine("branch");
                    Console.ForegroundColor = helpTextColor;
                    Console.WriteLine();
                    Console.ForegroundColor = consoleColor;
                    Console.WriteLine("Usage:");
                    Console.WriteLine($"    branch [options]");
                    Console.WriteLine();
                    Console.WriteLine("Options:");
                    Console.Write("    -?, -h, --help  ");
                    Console.ForegroundColor = helpTextColor;
                    Console.WriteLine("Show help and usage information");
                    Console.ForegroundColor = consoleColor;
                    Console.WriteLine();
                    return;
                }
                if (args.Length >= 1 && args[0] == "--version")
                {
                    if (!isHelp)
                    {
                        var unclaimedArgs = new SortedSet<int>(Enumerable.Range(1, args.Length - 1));
                        var processingError = false;

                        if (unclaimedArgs.Any())
                        {
                            Console.ForegroundColor = ConsoleColor.Red;
                            Console.Error.WriteLine($"Unrecognised args: " + string.Join(", ", unclaimedArgs.Select(i => args[i])) + "");
                            Console.ForegroundColor = consoleColor;
                            processingError = true;
                        }

                        if (!processingError)
                        {
                            PrintVersion();
                            return;
                        }
                    }

                    Console.WriteLine("Consolo.TestSource");
                    Console.WriteLine();
                    Console.WriteLine("--version");
                    Console.ForegroundColor = helpTextColor;
                    Console.WriteLine("    Prints the version of the application");
                    Console.WriteLine();
                    Console.ForegroundColor = consoleColor;
                    Console.WriteLine("Usage:");
                    Console.WriteLine($"    --version [options]");
                    Console.WriteLine();
                    Console.WriteLine("Options:");
                    Console.Write("    -?, -h, --help  ");
                    Console.ForegroundColor = helpTextColor;
                    Console.WriteLine("Show help and usage information");
                    Console.ForegroundColor = consoleColor;
                    Console.WriteLine();
                    return;
                }
                if (!isHelp)
                {
                    var unclaimedArgs = new SortedSet<int>(Enumerable.Range(0, args.Length - 0));
                    var processingError = false;

                    if (unclaimedArgs.Any())
                    {
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.Error.WriteLine($"Unrecognised args: " + string.Join(", ", unclaimedArgs.Select(i => args[i])) + "");
                        Console.ForegroundColor = consoleColor;
                        processingError = true;
                    }

                    if (!processingError)
                    {
                        Consolo.Samples.Root.MainRoot();
                        return;
                    }
                }

                Console.WriteLine("Consolo.TestSource");
                Console.ForegroundColor = helpTextColor;
                Console.WriteLine();
                Console.ForegroundColor = consoleColor;
                Console.WriteLine("Usage:");
                Console.WriteLine($"     [options]");
                Console.WriteLine();
                Console.WriteLine("Options:");
                Console.Write("    -?, -h, --help  ");
                Console.ForegroundColor = helpTextColor;
                Console.WriteLine("Show help and usage information");
                Console.ForegroundColor = consoleColor;
                Console.WriteLine();
                Console.WriteLine("Commands:");
                Console.Write("    remote    ");
                Console.ForegroundColor = helpTextColor;
                Console.WriteLine("  ");
                Console.ForegroundColor = consoleColor;
                Console.Write("    remote .. ");
                Console.ForegroundColor = helpTextColor;
                Console.WriteLine("  ");
                Console.ForegroundColor = consoleColor;
                Console.Write("    branch    ");
                Console.ForegroundColor = helpTextColor;
                Console.WriteLine("  ");
                Console.ForegroundColor = consoleColor;
                return;
            }
        }

                #pragma warning disable CS8321
        static bool MatchNextPositional<T>(string[] args, ref T value, Func<string, T> mapper, ISet<int> unclaimedArgs)
        {
            foreach (var index in unclaimedArgs)
            {
                var arg = args[index];
                if (!arg.StartsWith("-"))
                {
                    value = mapper(arg);
                    unclaimedArgs.Remove(index);
                    return true;
                }
            }

            return false;
        }

        static bool MatchNextFlag(string[] args, string[] optionNames, ref bool value, ISet<int> unclaimedArgs)
        {
            foreach (var index in unclaimedArgs)
            {
                var arg = args[index];
            
                if (arg.EndsWith(":true", StringComparison.InvariantCultureIgnoreCase) || arg.EndsWith("=true", StringComparison.InvariantCultureIgnoreCase))
                {
                    var optionName = arg.Substring(0, arg.Length - 5);

                    if (optionNames.Contains(optionName))
                    {
                        value = true;
                        unclaimedArgs.Remove(index);
                        return true;
                    }
                }
            
                if (arg.EndsWith(":false", StringComparison.InvariantCultureIgnoreCase) || arg.EndsWith("=false", StringComparison.InvariantCultureIgnoreCase))
                {
                    var optionName = arg.Substring(0, arg.Length - 6);

                    if (optionNames.Contains(optionName))
                    {
                        value = false;
                        unclaimedArgs.Remove(index);
                        return true;
                    }
                }

                if (optionNames.Contains(arg))
                {
                    value = true;
                    unclaimedArgs.Remove(index);
                    return true;
                }
            }

            return false;
        }

        // Returns 0 if the option is not found
        // Returns 1 if the option is found and the value is found
        // Returns 2 if the option is found but the value is missing
        static int MatchNextOption<T>(string[] args, string[] optionNames, ref T value, Func<string, T> mapper, ISet<int> unclaimedArgs)
        {
            foreach (var i in unclaimedArgs)
            {
                var arg = args[i];

                if (optionNames.Contains(arg))
                {
                    if (i + 1 < args.Length && unclaimedArgs.Contains(i + 1) && !args[i + 1].StartsWith("-"))
                    {
                        value = mapper(args[i + 1]);
                        unclaimedArgs.Remove(i);
                        unclaimedArgs.Remove(i + 1);
                        return 1;
                    }
                    
                    return 2;
                }

                if (arg.Contains(':'))
                {
                    var parts = arg.Split(':', 2);

                    if (optionNames.Contains(parts[0]))
                    {
                        value = mapper(parts[1]);
                        unclaimedArgs.Remove(i);
                        return 1;
                    }
                }

                if (arg.Contains('='))
                {
                    var parts = arg.Split('=', 2);

                    if (optionNames.Contains(parts[0]))
                    {
                        value = mapper(parts[1]);
                        unclaimedArgs.Remove(i);
                        return 1;
                    }
                }

            }

            return 0;
        }
        
        #pragma warning restore CS8321
        static void PrintVersion()
{
    Console.WriteLine(System.Reflection.Assembly.GetExecutingAssembly().GetName().Version?.ToString());
}
    }
}
